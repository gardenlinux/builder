#!/usr/bin/env bash

set -Eeufo pipefail

# redirect all output to stderr so only second pass output for makedisk gets written to stdout
exec 3>&1
exec 1>&2

rootfs="$1"

rootfs_work=$(mktemp -d)
mount -t tmpfs -o size=2G tmpfs "$rootfs_work"
cp -a "$rootfs/." "$rootfs_work"

fstab="$(mktemp)"
veritytab="$(mktemp)"
root_hash="$(mktemp)"
root_repart="$(mktemp)"

dracut_include="$(mktemp -d)"
bind_mounts="$(mktemp -d)"

partitions="$(mktemp)"
final_partition="$(mktemp)"
secureboot_partitions="$(mktemp)"
efi_partition="$(mktemp)"

part_num=0

# strip comments and empty lines and sort by path depth (deepest first)
sed 's/#.*//;/^[[:space:]]*$/d' \
| while IFS= read -r line; do
	# get fstab entry target path depth
	depth=$(echo "$line" | awk '{ print $2 }' | sed 's#^/\+##;s#/\+$##' | awk -F '/' '{ print NF }')
	# /bind_mounts is a special partition that must be created after all others, but before root
	if [ "$(echo "$line" | awk '{ print $2 }')" = "/bind_mounts" ]; then
		depth=0.1
	fi
	echo "$depth" "$line"
  done \
| sort -k 1 -n -r \
| while read -r depth source target fs options args; do
	part_num=$((part_num + 1))
	# parse extra fstab arguments to determine partition attributes
	type=$([[ "$fs" = "swap" ]] && echo "swap" || echo "linux")
	# consider switching this to args
	[[ "$target" = "/" && "$BUILDER_ARCH" = "amd64" ]] && type="4f68bce3-e8cd-4db1-96e7-fbcaf984b709"
	[[ "$target" = "/" && "$BUILDER_ARCH" = "arm64" ]] && type="b921b045-1df0-41c3-af44-4c6f280d3fae"
	size=
	resize=1
	verity=0
	secureboot=0
	syslinux=$([[ "$(cut -c -5 <<< "$target")" = "/boot" ]] || [[ "$(tr -d '[:blank:]' <<< "$target")" = "/efi" ]] && [[ -f "$rootfs/usr/bin/syslinux" ]] && echo 1 || echo 0)
	ephemeral=0
	ephemeral_cryptsetup=0
	weight=1
	is_final_partition=0
	while IFS="=" read -r key value; do
		case "$key" in
			"type")
				type="$value"
				;;
			"size")
				size="$value"
				resize=0
				;;
			"verity")
				verity=1
				;;
			"secureboot")
				secureboot=1
				;;
			"syslinux")
				syslinux=1
				;;
			"ephemeral")
				ephemeral=1
				;;
			"ephemeral_cryptsetup")
				ephemeral_cryptsetup=1
				;;
			"weight")
				weight="$value"
				;;
			"final_partition")
				is_final_partition=1
				;;
		esac
	done < <(echo "$args" | tr "," "\n")

	# check if fstab entry specifies source by UUID or LABEL
	uuid="$(grep -oP '(?<=^UUID=)[a-fA-F0-9\-]*$' <<< "$source" || true)"
	label="$(grep -oP '(?<=^LABEL=)[a-zA-Z0-9\_\-]*$' <<< "$source" || true)"
	repart="$(grep -oP '(?<=^REPART=)[0-9]*$' <<< "$source" || true)"

	if [[ "$ephemeral" = 1 ]] || [[ "$ephemeral_cryptsetup" = 1 ]] && [[ -z "$repart" ]]; then
		echo "WARNING: ephemeral flag only works for partitions created by systemd-repart"
	fi

	if [[ "$depth" = 0 ]]; then
		if grep "/bind_mounts" "$fstab"; then
			mkdir -p "$rootfs_work/bind_mounts"
		fi
		# we iterate depth sorted, so all other partitions should already have been processed and written to fstab
		if [[ "$verity" = 0 ]] && [[ -z "$repart" ]]; then
			options="$options,x-systemd.growfs"
			echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
		fi
		column -t "$fstab" | tac > "$rootfs_work/etc/fstab"
		column -t "$veritytab" | tac >> "$rootfs_work/etc/veritytab"
	fi

	if [[ "$source" = "bind" ]]; then
		parent=""$bind_mounts$(dirname "$target")""
		mkdir -p "$parent"
		mv "$rootfs_work$target" "$parent"
		mkdir "$rootfs_work$target"
		echo "/bind_mounts$target" "$target" "none" "bind,x-systemd.requires-mounts-for=/bind_mounts" "0" "2" >> "$fstab"
		continue
	fi

	data_source="$([ "$target" = "/bind_mounts" ] && echo "$bind_mounts" || echo "$rootfs_work$target")"

	if [[ -n "$repart" ]]; then
		if [[ "$depth" = 0 ]]; then
			find "$data_source/boot" -type f -delete
			echo 1 > "$root_repart"
		fi
		make_repart_partition -t "$target" -f "$fs" -o "$options" -g "$type" -e "$ephemeral" -c "$ephemeral_cryptsetup" -w "$weight" "$repart" "$data_source" "$dracut_include"
		find "$data_source" -depth -mindepth 1 -delete
		continue
	fi

	# compute sufficiently padded size for partition (aligned to nearest MB (2048 sectors))
	size=${size:-$(du -sb "$data_source" | awk '{ min_size_bytes = min_size * MB; size = $1 * 1.5; padded_size = size + (MB - (size % MB) % MB); if (padded_size < min_size_bytes) padded_size = min_size_bytes; print (padded_size / MB) "MiB" }' "MB=1048576" "min_size=64")}

	file="$(mktemp)"
	truncate -s "$size" "$file"

	case "$fs" in
		"ext4")
			# mke2fs sets the ext4 superblock s_flags field to EXT2_FLAGS_SIGNED_HASH or EXT2_FLAGS_UNSIGNED_HASH depending on architecture, so we need to use target architecture e2fsprogs, not native ones
			[ ! -e "$rootfs/builder" ]
			mkdir "$rootfs/builder"
			mount --rbind --make-rprivate /builder "$rootfs/builder"
			mount -t tmpfs -o size=2G none "$rootfs/tmp"
			[[ "$data_source" == /tmp* ]]
			[ "$(dirname "$file")" = /tmp ]
			mkdir -p "$rootfs$data_source"
			mount --bind "$data_source" "$rootfs$data_source"
			touch "$rootfs$file"
			mount --bind "$file" "$rootfs$file"
			mount --rbind --make-rprivate /proc "$rootfs/proc"
			#shellcheck disable=SC2046
			chroot "$rootfs" make_reproducible_ext4 -t "$BUILDER_TIMESTAMP" -h "gardenlinux:$BUILDER_VERSION:partition:$target" ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} -q $([ "$resize" = 0 ] || echo "-m") $(grep -v x-systemd.growfs <<< "$options" &> /dev/null || echo "-j") -p 16 "$data_source" "$file"
			umount -l "$rootfs/proc"
			umount -R "$rootfs/tmp"
			umount -l "$rootfs/builder"
			rmdir "$rootfs/builder"
			;;
		"vfat")
			make_reproducible_vfat -t "$BUILDER_TIMESTAMP" -h "gardenlinux:$BUILDER_VERSION:partition:$target" ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} "$data_source" "$file"
			echo "$file" > "$efi_partition"
			;;
		"swap")
			make_reproducible_swap ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} "$file"
			;;
		*)
			echo "filesystem type $fs not yet supported"
			exit 1
			;;
	esac

	# for real mount points (i.e. not swap) clear target directory after contents written to partition to avoid rewriting contents to parent mount point partition
	if [[ "$(cut -c 1 <<< "$target")" = "/" ]]; then
		find "$data_source" -depth -mindepth 1 -delete
	fi

	# install syslinux if extra argument given in fstab
	if [[ "$syslinux" = 1 ]]; then
		# syslinux uses mtools internally, so datefudge LD_PRELOAD applying to mtools native binaries, but not to syslinux binary should be sufficient for reproducible builds
		datefudge -s "@$BUILDER_TIMESTAMP" "$rootfs/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2" --library-path "$rootfs/usr/lib/x86_64-linux-gnu" "$rootfs/usr/bin/syslinux" -d syslinux -i "$file"
	fi

	# recalc size, since it might have change (e.g. from resize2fs)
	size=$(du -b "$file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' "MB=1048576")

	echo "$target $(sha256sum "$file")"

	# set dump and pass options for output fstab to defaults
	dump=0
	pass=$( ([[ "$(cut -c 1 <<< "$target")" != "/" ]] && echo 0) || ([[ "$target" = "/" ]] && echo 1) || echo 2)

	if [[ "$verity" = 1 ]]; then
		verity_uuid=$(echo "gardenlinux:$BUILDER_VERSION:verity_uuid:$fs:$target" | uuid_hash)
		verity_salt=$(echo "gardenlinux:$BUILDER_VERSION:verity_salt:$fs:$target" | sha256sum | cut -c -64)
		#shellcheck disable=SC2015
		hash_file=$([[ "$depth" = 0 ]] && echo "$root_hash" || mktemp)
		verity_file="$file.verity"
		veritysetup format --uuid "$verity_uuid" --salt "$verity_salt" --data-block-size=4096 --hash-block-size=4096 --root-hash-file "$hash_file" "$file" "$verity_file"
		verity_size=$(du -b "$verity_file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' 'MB=1048576')
		hash=$(cat "$hash_file")
		part_uuid="${hash:0:8}-${hash:8:4}-${hash:12:4}-${hash:16:4}-${hash:20:12}"
		verity_part_uuid="${hash:32:8}-${hash:40:4}-${hash:44:4}-${hash:48:4}-${hash:52:12}"
		echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >> "$partitions"
		echo -e "$verity_part_uuid\tlinux\t$verity_size\t0\t$verity_file" >> "$partitions"
		make_repart_partition -g "$type" --def-only "$part_num" "$dracut_include"
		part_num=$((part_num + 1))
		make_repart_partition -g linux --def-only "$part_num" "$dracut_include"
		if [[ "$depth" != 0 ]]; then
			#shellcheck disable=SC2001
			verity_name="verity$(sed 's|/|_|' <<< "$target")"
			echo "$verity_name" "$source" "UUID=$verity_uuid" "$hash" >> "$veritytab"
			echo "/dev/mapper/$verity_name" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
		fi
	else
		part_uuid=$(echo "gardenlinux:$BUILDER_VERSION:part_uuid:$source" | uuid_hash)
		if [ "$is_final_partition" = 1 ]; then
			[ ! -s "$final_partition" ]
			echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >> "$final_partition"
		else
			echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >> "$partitions"
		fi
		make_repart_partition -g "$type" --def-only "$part_num" "$dracut_include"
		echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
	fi

	if [[ "$secureboot" = 1 ]]; then
		echo "$file" >> "$secureboot_partitions"
	fi
  done

rmdir "$bind_mounts"
umount "$rootfs_work"
rmdir "$rootfs_work"

if [[ -n "$(find "$dracut_include/etc/repart.d/" -name "1.*.conf")" ]] || [[ -d "$dracut_include/etc/systemd/system-generators" ]] && [[ -n "$(find "$dracut_include/etc/systemd/system-generators" -name "repart-*")" ]]; then
	disk_uuid=$(echo "gardenlinux:$BUILDER_VERSION:disk_uuid" | uuid_hash)
	make_repart_disk "$disk_uuid" "$dracut_include"
fi

read -r _ cmdline < "$rootfs/etc/kernel/cmdline" # hacky assumption that root= is always at start of kernel cmdline. TODO: find better way to handle this
if [[ -z "$(cat "$root_hash")" ]]; then
	if [[ -z "$(cat "$root_repart")" ]]; then
		root_source=$(tail -n 1 "$fstab" | cut -d " " -f 1)
		cmdline="root=$root_source $cmdline"
	fi

	# enable verity if the root partition is writable, but any other partition has verity enabled, most likely /usr
	if [ -n "$(cat "$veritytab")" ] && [ ! -s "$secureboot_partitions" ]; then
		makesecureboot -r "$rootfs" -c "$cmdline" -v "$veritytab" -i "$dracut_include" -t "$BUILDER_TIMESTAMP" -s "false" < "$efi_partition"
	fi
else
	cmdline="roothash=$(cat "$root_hash") root=/dev/mapper/root $cmdline"

	if [ ! -s "$secureboot_partitions" ]; then
		makesecureboot -r "$rootfs" -c "$cmdline" -v "$veritytab" -i "$dracut_include" -t "$BUILDER_TIMESTAMP" -s "false" < "$efi_partition"
	fi
fi

if [ -s "$secureboot_partitions" ]; then
	makesecureboot -r "$rootfs" -c "$cmdline" -v "$veritytab" -i "$dracut_include" -t "$BUILDER_TIMESTAMP" < "$secureboot_partitions"
fi

cat "$partitions" "$final_partition" >&3

# cleanup
rm "$fstab" "$veritytab" "$root_hash" "$root_repart" "$partitions" "$final_partition" "$secureboot_partitions"
rm -rf "$dracut_include"
